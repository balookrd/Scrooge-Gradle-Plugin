/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift.benchmark;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Flight implements TBase<Flight, Flight._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Flight");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField FROM_FIELD_DESC = new TField("from", TType.STRUCT, (short)3);
  private static final TField TO_FIELD_DESC = new TField("to", TType.STRUCT, (short)4);
  private static final TField DEPARTURE_TIME_FIELD_DESC = new TField("departureTime", TType.I64, (short)5);


  public long id;
  public String name;
  public Airport from;
  public Airport to;
  public long departureTime;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    FROM((short)3, "from"),
    TO((short)4, "to"),
    DEPARTURE_TIME((short)5, "departureTime");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // FROM
          return FROM;
        case 4: // TO
          return TO;
        case 5: // DEPARTURE_TIME
          return DEPARTURE_TIME;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DEPARTURETIME_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.REQUIRED,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.FROM, new FieldMetaData("from", TFieldRequirementType.REQUIRED,
      new StructMetaData(TType.STRUCT, Airport.class)));
    tmpMap.put(_Fields.TO, new FieldMetaData("to", TFieldRequirementType.REQUIRED,
      new StructMetaData(TType.STRUCT, Airport.class)));
    tmpMap.put(_Fields.DEPARTURE_TIME, new FieldMetaData("departureTime", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Flight.class, metaDataMap);
  }


  public Flight() {
  }

  public Flight(
    long id,
    String name,
    Airport from,
    Airport to)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.from = from;
    this.to = to;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Flight(Flight other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFrom()) {
      this.from = new Airport(other.from);
    }
    if (other.isSetTo()) {
      this.to = new Airport(other.to);
    }
    this.departureTime = other.departureTime;
  }

  public Flight deepCopy() {
    return new Flight(this);
  }

  @java.lang.Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.from = null;
    this.to = null;
    setDepartureTimeIsSet(false);
    this.departureTime = 0;
  }

  public long getId() {
    return this.id;
  }

  public Flight setId(long id) {
    this.id = id;
    setIdIsSet(true);

    return this;
  }

  public void unsetId() {
  __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Flight setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public Airport getFrom() {
    return this.from;
  }

  public Flight setFrom(Airport from) {
    this.from = from;
    
    return this;
  }

  public void unsetFrom() {
    this.from = null;
  }

  /** Returns true if field from is set (has been asigned a value) and false otherwise */
  public boolean isSetFrom() {
    return this.from != null;
  }

  public void setFromIsSet(boolean value) {
    if (!value) {
      this.from = null;
    }
  }

  public Airport getTo() {
    return this.to;
  }

  public Flight setTo(Airport to) {
    this.to = to;
    
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been asigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public long getDepartureTime() {
    return this.departureTime;
  }

  public Flight setDepartureTime(long departureTime) {
    this.departureTime = departureTime;
    setDepartureTimeIsSet(true);

    return this;
  }

  public void unsetDepartureTime() {
  __isset_bit_vector.clear(__DEPARTURETIME_ISSET_ID);
  }

  /** Returns true if field departureTime is set (has been asigned a value) and false otherwise */
  public boolean isSetDepartureTime() {
    return __isset_bit_vector.get(__DEPARTURETIME_ISSET_ID);
  }

  public void setDepartureTimeIsSet(boolean value) {
    __isset_bit_vector.set(__DEPARTURETIME_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((Airport)value);
      }
      break;
    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((Airport)value);
      }
      break;
    case DEPARTURE_TIME:
      if (value == null) {
        unsetDepartureTime();
      } else {
        setDepartureTime((Long)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());
    case NAME:
      return getName();
    case FROM:
      return getFrom();
    case TO:
      return getTo();
    case DEPARTURE_TIME:
      return new Long(getDepartureTime());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case FROM:
      return isSetFrom();
    case TO:
      return isSetTo();
    case DEPARTURE_TIME:
      return isSetDepartureTime();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Flight)
      return this.equals((Flight)that);
    return false;
  }

  public boolean equals(Flight that) {
    if (that == null)
      return false;
    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_from = true && this.isSetFrom();
    boolean that_present_from = true && that.isSetFrom();
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (!this.from.equals(that.from))
        return false;
    }
    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }
    boolean this_present_departureTime = true && this.isSetDepartureTime();
    boolean that_present_departureTime = true && that.isSetDepartureTime();
    if (this_present_departureTime || that_present_departureTime) {
      if (!(this_present_departureTime && that_present_departureTime))
        return false;
      if (this.departureTime != that.departureTime)
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_from = true && (isSetFrom());
    builder.append(present_from);
    if (present_from)
      builder.append(from);
    boolean present_to = true && (isSetTo());
    builder.append(present_to);
    if (present_to)
      builder.append(to);
    boolean present_departureTime = true && (isSetDepartureTime());
    builder.append(present_departureTime);
    if (present_departureTime)
      builder.append(departureTime);
    return builder.toHashCode();
  }

  public int compareTo(Flight other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Flight typedOther = (Flight)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(typedOther.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = TBaseHelper.compareTo(this.from, typedOther.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(typedOther.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = TBaseHelper.compareTo(this.to, typedOther.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureTime()).compareTo(typedOther.isSetDepartureTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureTime()) {
      lastComparison = TBaseHelper.compareTo(this.departureTime, typedOther.departureTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FROM
          if (field.type == TType.STRUCT) {
            this.from = new Airport();
            this.from.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TO
          if (field.type == TType.STRUCT) {
            this.to = new Airport();
            this.to.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DEPARTURE_TIME
          if (field.type == TType.I64) {
            this.departureTime = iprot.readI64();
            setDepartureTimeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetId()) {
      throw new TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.from != null) {
      oprot.writeFieldBegin(FROM_FIELD_DESC);
      this.from.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.to != null) {
      oprot.writeFieldBegin(TO_FIELD_DESC);
      this.to.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetDepartureTime()) {
      oprot.writeFieldBegin(DEPARTURE_TIME_FIELD_DESC);
      oprot.writeI64(this.departureTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Flight(");
    boolean first = true;
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("from:");
    if (this.from == null) {
      sb.append("null");
    } else {
      sb.append(this.from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (isSetDepartureTime()) {
      if (!first) sb.append(", ");
      sb.append("departureTime:");
      sb.append(this.departureTime);
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (from == null) {
      throw new TProtocolException("Required field 'from' was not present! Struct: " + toString());
    }
    if (to == null) {
      throw new TProtocolException("Required field 'to' was not present! Struct: " + toString());
    }
  }
}

