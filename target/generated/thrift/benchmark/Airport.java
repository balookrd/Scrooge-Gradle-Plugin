/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift.benchmark;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Airport implements TBase<Airport, Airport._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Airport");

  private static final TField CODE_FIELD_DESC = new TField("code", TType.STRING, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)3);
  private static final TField STATE_FIELD_DESC = new TField("state", TType.STRING, (short)4);
  private static final TField CLOSEST_CITY_FIELD_DESC = new TField("closest_city", TType.STRING, (short)5);
  private static final TField LOC_FIELD_DESC = new TField("loc", TType.STRUCT, (short)6);


  public String code;
  public String name;
  public String country;
  public String state;
  public String closest_city;
  public Location loc;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CODE((short)1, "code"),
    NAME((short)2, "name"),
    COUNTRY((short)3, "country"),
    STATE((short)4, "state"),
    CLOSEST_CITY((short)5, "closest_city"),
    LOC((short)6, "loc");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // NAME
          return NAME;
        case 3: // COUNTRY
          return COUNTRY;
        case 4: // STATE
          return STATE;
        case 5: // CLOSEST_CITY
          return CLOSEST_CITY;
        case 6: // LOC
          return LOC;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new FieldMetaData("code", TFieldRequirementType.REQUIRED,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.REQUIRED,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new FieldMetaData("country", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATE, new FieldMetaData("state", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CLOSEST_CITY, new FieldMetaData("closest_city", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOC, new FieldMetaData("loc", TFieldRequirementType.OPTIONAL,
      new StructMetaData(TType.STRUCT, Location.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Airport.class, metaDataMap);
  }


  public Airport() {
  }

  public Airport(
    String code,
    String name)
  {
    this();
    this.code = code;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Airport(Airport other) {
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetClosest_city()) {
      this.closest_city = other.closest_city;
    }
    if (other.isSetLoc()) {
      this.loc = new Location(other.loc);
    }
  }

  public Airport deepCopy() {
    return new Airport(this);
  }

  @java.lang.Override
  public void clear() {
    this.code = null;
    this.name = null;
    this.country = null;
    this.state = null;
    this.closest_city = null;
    this.loc = null;
  }

  public String getCode() {
    return this.code;
  }

  public Airport setCode(String code) {
    this.code = code;
    
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been asigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Airport setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public Airport setCountry(String country) {
    this.country = country;
    
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been asigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getState() {
    return this.state;
  }

  public Airport setState(String state) {
    this.state = state;
    
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been asigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getClosest_city() {
    return this.closest_city;
  }

  public Airport setClosest_city(String closest_city) {
    this.closest_city = closest_city;
    
    return this;
  }

  public void unsetClosest_city() {
    this.closest_city = null;
  }

  /** Returns true if field closest_city is set (has been asigned a value) and false otherwise */
  public boolean isSetClosest_city() {
    return this.closest_city != null;
  }

  public void setClosest_cityIsSet(boolean value) {
    if (!value) {
      this.closest_city = null;
    }
  }

  public Location getLoc() {
    return this.loc;
  }

  public Airport setLoc(Location loc) {
    this.loc = loc;
    
    return this;
  }

  public void unsetLoc() {
    this.loc = null;
  }

  /** Returns true if field loc is set (has been asigned a value) and false otherwise */
  public boolean isSetLoc() {
    return this.loc != null;
  }

  public void setLocIsSet(boolean value) {
    if (!value) {
      this.loc = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((String)value);
      }
      break;
    case CLOSEST_CITY:
      if (value == null) {
        unsetClosest_city();
      } else {
        setClosest_city((String)value);
      }
      break;
    case LOC:
      if (value == null) {
        unsetLoc();
      } else {
        setLoc((Location)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();
    case NAME:
      return getName();
    case COUNTRY:
      return getCountry();
    case STATE:
      return getState();
    case CLOSEST_CITY:
      return getClosest_city();
    case LOC:
      return getLoc();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case NAME:
      return isSetName();
    case COUNTRY:
      return isSetCountry();
    case STATE:
      return isSetState();
    case CLOSEST_CITY:
      return isSetClosest_city();
    case LOC:
      return isSetLoc();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Airport)
      return this.equals((Airport)that);
    return false;
  }

  public boolean equals(Airport that) {
    if (that == null)
      return false;
    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }
    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }
    boolean this_present_closest_city = true && this.isSetClosest_city();
    boolean that_present_closest_city = true && that.isSetClosest_city();
    if (this_present_closest_city || that_present_closest_city) {
      if (!(this_present_closest_city && that_present_closest_city))
        return false;
      if (!this.closest_city.equals(that.closest_city))
        return false;
    }
    boolean this_present_loc = true && this.isSetLoc();
    boolean that_present_loc = true && that.isSetLoc();
    if (this_present_loc || that_present_loc) {
      if (!(this_present_loc && that_present_loc))
        return false;
      if (!this.loc.equals(that.loc))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_code = true && (isSetCode());
    builder.append(present_code);
    if (present_code)
      builder.append(code);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_country = true && (isSetCountry());
    builder.append(present_country);
    if (present_country)
      builder.append(country);
    boolean present_state = true && (isSetState());
    builder.append(present_state);
    if (present_state)
      builder.append(state);
    boolean present_closest_city = true && (isSetClosest_city());
    builder.append(present_closest_city);
    if (present_closest_city)
      builder.append(closest_city);
    boolean present_loc = true && (isSetLoc());
    builder.append(present_loc);
    if (present_loc)
      builder.append(loc);
    return builder.toHashCode();
  }

  public int compareTo(Airport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Airport typedOther = (Airport)other;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosest_city()).compareTo(typedOther.isSetClosest_city());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosest_city()) {
      lastComparison = TBaseHelper.compareTo(this.closest_city, typedOther.closest_city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoc()).compareTo(typedOther.isSetLoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoc()) {
      lastComparison = TBaseHelper.compareTo(this.loc, typedOther.loc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CODE
          if (field.type == TType.STRING) {
            this.code = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COUNTRY
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // STATE
          if (field.type == TType.STRING) {
            this.state = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CLOSEST_CITY
          if (field.type == TType.STRING) {
            this.closest_city = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // LOC
          if (field.type == TType.STRUCT) {
            this.loc = new Location();
            this.loc.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.code != null) {
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeString(this.code);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      if (isSetCountry()) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
    }
    if (this.state != null) {
      if (isSetState()) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(this.state);
        oprot.writeFieldEnd();
      }
    }
    if (this.closest_city != null) {
      if (isSetClosest_city()) {
        oprot.writeFieldBegin(CLOSEST_CITY_FIELD_DESC);
        oprot.writeString(this.closest_city);
        oprot.writeFieldEnd();
      }
    }
    if (this.loc != null) {
      if (isSetLoc()) {
        oprot.writeFieldBegin(LOC_FIELD_DESC);
        this.loc.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Airport(");
    boolean first = true;
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      }
    if (isSetClosest_city()) {
      if (!first) sb.append(", ");
      sb.append("closest_city:");
      if (this.closest_city == null) {
        sb.append("null");
      } else {
        sb.append(this.closest_city);
      }
      first = false;
      }
    if (isSetLoc()) {
      if (!first) sb.append(", ");
      sb.append("loc:");
      if (this.loc == null) {
        sb.append("null");
      } else {
        sb.append(this.loc);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (code == null) {
      throw new TProtocolException("Required field 'code' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
  }
}

