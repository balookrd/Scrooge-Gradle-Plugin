/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift.benchmark;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class MapCollections implements TBase<MapCollections, MapCollections._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MapCollections");

  private static final TField INT_STRING_FIELD_DESC = new TField("intString", TType.MAP, (short)1);


  public Map<Long,String> intString;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    INT_STRING((short)1, "intString");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INT_STRING
          return INT_STRING;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INT_STRING, new FieldMetaData("intString", TFieldRequirementType.DEFAULT,
      new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.I64),
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(MapCollections.class, metaDataMap);
  }


  public MapCollections() {
  }

  public MapCollections(
    Map<Long,String> intString)
  {
    this();
    this.intString = intString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapCollections(MapCollections other) {
    if (other.isSetIntString()) {
      Map<Long,String> __this__intString = new HashMap<Long,String>();
      for (Map.Entry<Long, String> other_element : other.intString.entrySet()) {
        Long other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();
        Long __this__intString_copy_key = other_element_key;
        String __this__intString_copy_value = other_element_value;
        __this__intString.put(__this__intString_copy_key, __this__intString_copy_value);
      }
      this.intString = __this__intString;
    }
  }

  public MapCollections deepCopy() {
    return new MapCollections(this);
  }

  @java.lang.Override
  public void clear() {
    this.intString = null;
  }

  public int getIntStringSize() {
    return (this.intString == null) ? 0 : this.intString.size();
  }

  public void putToIntString(long key, String val) {
    if (this.intString == null) {
      this.intString = new HashMap<Long,String>();
    }
    this.intString.put(key, val);
  }

  public Map<Long,String> getIntString() {
    return this.intString;
  }

  public MapCollections setIntString(Map<Long,String> intString) {
    this.intString = intString;
    
    return this;
  }

  public void unsetIntString() {
    this.intString = null;
  }

  /** Returns true if field intString is set (has been asigned a value) and false otherwise */
  public boolean isSetIntString() {
    return this.intString != null;
  }

  public void setIntStringIsSet(boolean value) {
    if (!value) {
      this.intString = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INT_STRING:
      if (value == null) {
        unsetIntString();
      } else {
        setIntString((Map<Long,String>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INT_STRING:
      return getIntString();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INT_STRING:
      return isSetIntString();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapCollections)
      return this.equals((MapCollections)that);
    return false;
  }

  public boolean equals(MapCollections that) {
    if (that == null)
      return false;
    boolean this_present_intString = true && this.isSetIntString();
    boolean that_present_intString = true && that.isSetIntString();
    if (this_present_intString || that_present_intString) {
      if (!(this_present_intString && that_present_intString))
        return false;
      if (!this.intString.equals(that.intString))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_intString = true && (isSetIntString());
    builder.append(present_intString);
    if (present_intString)
      builder.append(intString);
    return builder.toHashCode();
  }

  public int compareTo(MapCollections other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MapCollections typedOther = (MapCollections)other;

    lastComparison = Boolean.valueOf(isSetIntString()).compareTo(typedOther.isSetIntString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntString()) {
      lastComparison = TBaseHelper.compareTo(this.intString, typedOther.intString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // INT_STRING
          if (field.type == TType.MAP) {
            {
            TMap _map0 = iprot.readMapBegin();
            this.intString = new HashMap<Long,String>(2*_map0.size);
            for (int _i1 = 0; _i1 < _map0.size; ++_i1)
            {
              long _key2;
              String _val3;
              _key2 = iprot.readI64();
              _val3 = iprot.readString();
              this.intString.put(_key2, _val3);
            }
            iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.intString != null) {
      oprot.writeFieldBegin(INT_STRING_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I64, TType.STRING, this.intString.size()));
        for (Map.Entry<Long, String> _iter4 : this.intString.entrySet())
        {
          oprot.writeI64(_iter4.getKey());
          oprot.writeString(_iter4.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapCollections(");
    boolean first = true;
    sb.append("intString:");
    if (this.intString == null) {
      sb.append("null");
    } else {
      sb.append(this.intString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}

